<?php

namespace Networking\InitCmsBundle\Entity;

use Networking\InitCmsBundle\Entity\ContentRoute;

use Doctrine\ORM\EntityRepository;

use Symfony\Cmf\Component\Routing\RouteRepositoryInterface;

use Symfony\Component\HttpFoundation\Session\Session;

use Symfony\Component\Routing\RouteCollection;
use Symfony\Cmf\Component\Routing\DynamicRouter;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentRouteRepository extends EntityRepository implements RouteRepositoryInterface
{
	protected $locale;

	protected $className;

	/**
	 * @param $className
	 */
	public function setClassName($className = null)
	{
		$this->className = $className;
	}

	/**
	 * @param $locale
	 */
	public function setLocaleBySession(Session $session)
	{
		$this->setLocale($session->get('_locale'));
	}

	public function setLocale($locale)
	{
		$this->locale = $locale;
	}

	/**
	 * {@inheritDoc}
	 */
	public function getRouteByName($name, $parameters = array())
	{
		$dynamicRouteName = DynamicRouter::ROUTE_GENERATE_DUMMY_NAME;
		if ($name !== $dynamicRouteName) {

			throw new RouteNotFoundException("Route name '$name' does not begin with the route name prefix '{ $dynamicRouteName }'");
		}

		$parameters['classType'] = $this->className;

		$route = $this->findOneBy($parameters);

		if (!$route) {
			throw new RouteNotFoundException("No route found for name '$name'");
		}

		$this->initializeContentRoute($route);

		return $route;
	}

	/**
	 * {@inheritDoc}
	 */
	public function findManyByUrl($url)
	{
		$collection = new RouteCollection();

		/** @var $connection \Doctrine\DBAL\Connection */
		$connection = $this->getEntityManager()->getConnection();
		try {
			$connection->connect();
		} catch (\Exception $e) {
			return $collection;
		}

		if (!$connection->isConnected()) return $collection;


		$params = array('path' => $url);

		if ($this->locale) {
			$params['locale'] = $this->locale;
		}

		/** @var $contentRoute ContentRoute */
		$contentRoutes = $this->findBy($params);

		foreach ($contentRoutes as $key => $contentRoute) {
			$this->initializeContentRoute($contentRoute);
			$collection->add(DynamicRouter::ROUTE_GENERATE_DUMMY_NAME . preg_replace('/[^a-z0-9A-Z_.]/', '_', $key), $contentRoute);
		}

		return $collection;
	}

	protected function initializeContentRoute(ContentRoute &$contentRoute)
	{
		$content = $this->getRouteContent($contentRoute);
		$contentRoute->initializeRoute($content);
	}

	/**
	 * @param  ContentRoute $contentRoute
	 * @return object
	 */
	protected function getRouteContent(ContentRoute $contentRoute)
	{
		$repository = $this->getEntityManager()->getRepository($this->className);

		return $repository->find($contentRoute->getObjectId());
	}
}
