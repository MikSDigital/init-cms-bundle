{#

This file is part of the Networking package.

(c) net working AG <info@networking.ch>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.

#}
{% autoescape false %}
<!-- edit one association -->
<script type="text/javascript">
// handle the update bind
var field_update_{{ id }} = function (event) {
    event.preventDefault();
    event.stopPropagation();
    var data = {};
    var form = jQuery(this).closest('form');
    {% if init_cms_editor == 'ckeditor' %}
    jQuery.each(CKEDITOR.instances, function () {
        try {
            var editor = this;
            var text = editor.getData();
            if (data) {
                if (editor) {
                    editor.setData(data);
                    jQuery('#' + editor.name).val(text);
                }
            }

        } catch (err) {
        }
    });
    {% endif %}
    updateLayoutBlocks(form, data);

};

function updateLayoutBlocks(form, data) {


    var url = '{{ url('admin_networking_initcms_page_updateFormFieldElement', {
                            'code':      sonata_admin.admin.root.code,
                            'elementId': id,
                            'objectId':  sonata_admin.admin.root.id(sonata_admin.admin.root.subject),
                            'uniqid':    sonata_admin.admin.root.uniqid
                        } + sonata_admin.field_description.getOption('link_parameters', {})) }}';

    doAjaxSubmit(url, form, data);

}

// handle the add link
var field_add_{{ id }} = function (event) {
    event.preventDefault();
    event.stopPropagation();
    if (event.currentTarget == undefined) {
        var addLink = event.target;
    } else {
        var addLink = event.currentTarget;
    }
    var restrictedTypes = eval(jQuery(addLink).attr('data-value'));

    jQuery('#selectContentType').find('option').each(function (i) {
        if (jQuery.inArray($(this).val(), restrictedTypes) < 0 && restrictedTypes.length > 0) {
            jQuery(this).attr('disabled', 'disabled');
        } else {
            jQuery(this).removeAttr('disabled');
        }
    });
    $("#selectContentType").val($("#selectContentType option:enabled:first").val());

    jQuery('#contentTypeModal').modal('show');

    jQuery('#contentTypeModal').bind('initcms.create_block', function (event) {
        if (jQuery(this).data('create')) {
            var classType = jQuery('#selectContentType').val();
            var liItem = jQuery(addLink).closest('li');
            var zone = liItem.find("[id$='_zone']").val();
            var sortOrder = liItem.find("[id$='_sortOrder']").val();
            sortOrder++;
            liItem.parent().find('li.networking-sortable-list input[id$="_sortOrder"]').each(function (index, value) {
                if (jQuery(value).val() >= sortOrder) {
                    var newSortOrder = jQuery(value).val() + 1;
                    jQuery(value).val(newSortOrder);
                }
            });

            var data = {zone: zone, sortOrder: sortOrder, classType: classType };
            var form = jQuery(addLink).closest('form');
            var url = '{{ url('admin_networking_initcms_page_addLayoutBlock', {
                                            'code':      sonata_admin.admin.root.code,
                                            'elementId': id,
                                            'objectId':  sonata_admin.admin.root.id(sonata_admin.admin.root.subject),
                                            'uniqid':    sonata_admin.admin.root.uniqid
                                        } + sonata_admin.field_description.getOption('link_parameters', {})) }}';
            doAjaxSubmit(url, form, data);
            jQuery('a', '#contentTypeModal').die('click');
            jQuery('form', '#contentTypeModal').die('submit');
        }
    });
};

function start_save_content{{ id }}(link) {
    link.onclick = null;

    // add the jQuery event to the a element
    jQuery(link)
            .click(field_update_{{ id }})
            .trigger('click')
    ;

    return false;
}

function doAjaxSubmit(url, form, data) {

    data['_xml_http_request'] = true;
    // the ajax post
    jQuery(form).ajaxSubmit({
        url: url,
        type: "POST",
        dataType: 'html',
        data: data,
        success: function (html) {
            jQuery('#field_container_{{ id }}').replaceWith(html); // replace the html
            if (jQuery('input[type="file"]').length > 0) {
                jQuery(form).attr('enctype', 'multipart/form-data');
                jQuery(form).attr('encoding', 'multipart/form-data');
            }

            jQuery('#sonata-ba-field-container-{{ id }}').trigger('sonata.add_element');
            jQuery('#field_container_{{ id }}').trigger('sonata.add_element');

            jQuery(form).find('#zone_' + data.zone + ' .modal').each(function (i, value) {
                if (i + 1 == data.sortOrder) {
                    jQuery(value).on('shown', function () {
                        var windowHeight = $(window).height();
                        if (windowHeight - 100 < 800) {
                            var modalBodyHeight = windowHeight / 2;
                            $('.modal-body', this).css('max-height', modalBodyHeight + 'px');
                        }
                    });
                    jQuery('#contentTypeModal').modal('hide');
                    jQuery(value).modal('show');

                }
            });
            saveLayoutBlockSort();
        }
    });
}

var field_widget_{{ id }} = false;

// this function initialize the popup
// this can be only done this way has popup can be cascaded
function start_field_retrieve_{{ id }}(link) {
    link.onclick = null;

    // initialize component
    field_widget_{{ id }} = jQuery("#field_widget_{{ id }}");

    // add the jQuery event to the a element
    jQuery(link)
            .click(field_add_{{ id }})
            .trigger('click')
    ;

    return false;
}

function apply_position_value_{{ id }}() {
    // update the input value position
    jQuery('ul.sortable').each(function (index, value) {
        var index = 0;
        jQuery(value).find("li.networking-sort-zone").each(function (i, v) {
            if (!jQuery(v).find("input[id$='_delete']").is(':checked')) {
                jQuery(v).find("[id$='_sortOrder']").val(index);
                index++;
            }
        });
    });
}

function saveLayoutBlockSort(callback) {
    var zones = [];

    jQuery('ul.sortable').each(function (index, value) {
        var zone = jQuery(value).attr('id').substr(5);
        var layoutBlocks = jQuery(value).sortable("toArray", {key: "layoutBlock" });
        zones.push({'zone': zone, 'layoutBlocks': layoutBlocks});
    });

    jQuery.when(submitLayoutSort(zones)).done(function (xhr) {
        if (callback != undefined) {
            callback(xhr)
        }
    });

}
function submitLayoutSort(zones) {
    var dfd = jQuery.Deferred();
    return jQuery.ajax({
        url: '{{ url('admin_networking_initcms_page_updateLayoutBlockSort') }}',
        data: {
            zones: zones,
            objectId: {{ sonata_admin.admin.root.id(sonata_admin.admin.root.subject) }}
        },
        type: 'get',
        success: function (xhr) {
            if (xhr.status != 'error') {
                if (xhr.pageStatusSettings != undefined) jQuery('#pageStatusSettings').html(xhr.pageStatusSettings);
                if (xhr.pageStatus != undefined) {
                    if (xhr.pageStatus != "{{ 'status_published'|trans({}, admin.translationDomain) }}") {
                        jQuery('.page_status').addClass('color-draft');
                    } else {
                        jQuery('.page_status').removeClass('color-draft');
                    }
                    jQuery('.page_status').html(xhr.pageStatus);
                }
            }
            dfd.resolve(xhr);
        }
    });
}

function uploadError(xhr) {
    alert(xhr.error);
}

function onAfterLoad() {
    {% if init_cms_editor == 'ckeditor' %}
    createCkeditor();
    {% elseif init_cms_editor == 'redactor' %}
    createRedactor();
    {% endif %}

    apply_position_value_{{ id }}();

    jQuery('div#field_container_{{ id }} ul.sortable').sortable({
        handle: 'i.icon-move',
        opacity: 0.6,
        placeholder: "ui-state-highlight",
        items: 'li.networking-sortable-list',
        connectWith: ".sortable",
        tolerance: 'pointer',
        start: function () {
            {% if init_cms_editor == 'ckeditor' %}
            destroyCkeditor();
            {% endif %}
            jQuery(this).sortable('refreshPositions');
            var listItems = jQuery(this).find('.networking-sortable-list');
            if (listItems.length < 1) {
                jQuery(this).find(".empty_layout_block").show();
            } else {
                jQuery(this).find(".empty_layout_block").hide();
            }
        },
        stop: function (event, ui) {
            {% if init_cms_editor == 'ckeditor' %}
            createCkeditor();
            {% endif %}
            apply_position_value_{{ id }}();
            saveLayoutBlockSort(function (xhr) {
                createInitCmsMessageBox(xhr.messageStatus, xhr.message);
                {#jQuery('#field_container_{{ id }}').replaceWith(xhr.html);#}

            });
        },
        update: function (event, ui) {
            var maxItems = jQuery(this).attr('data-max-items');
            if (maxItems > 0 && jQuery(this).find('li.networking-sortable-list').length >= maxItems) {
                jQuery(this).find(".plus_button").hide();
            } else {
                jQuery(this).find(".plus_button").show();
            }
        },
        receive: function (event, ui) {

            var allowedTypes = eval(jQuery(this).attr('data-content-types'));
            var maxItems = jQuery(this).attr('data-max-items');
            var contentType = jQuery(ui.item).attr('data-content-type');

            if (allowedTypes.length > 0 && jQuery.inArray(contentType, allowedTypes) < 0) {
                jQuery(ui.placeholder).addClass('ui-state-error');
                jQuery(ui.sender).sortable('cancel');

                if (!jQuery(ui.sender).find('.networking-sortable-list').length < 2) {
                    jQuery(ui.sender).find(".empty_layout_block").hide();
                }
                return;
            }

            if (maxItems > 0 && jQuery(this).find('li.networking-sortable-list').length > maxItems) {
                jQuery(ui.placeholder).addClass('ui-state-error');
                jQuery(ui.sender).sortable('cancel');
                if (!jQuery(ui.sender).find('.networking-sortable-list').length < 2) {
                    jQuery(ui.sender).find(".empty_layout_block").hide();
                }
            } else {
                var zone = jQuery(this).attr('id').substr(5);
                var liItem = jQuery(ui.item);
                liItem.find("[idjQuery='_zone']").val(zone);
                apply_position_value_{{ id }}();
                jQuery(this).find(".empty_layout_block").hide();
            }
        },
        change: function (event, ui) {
            var listItems = jQuery(ui.sender).find('.networking-sortable-list');
            if (listItems.length <= 1) {
                jQuery(ui.sender).find(".empty_layout_block").show();
            } else {
                jQuery(ui.sender).find(".empty_layout_block").hide();
            }
        },
        over: function (event, ui) {

            var allowedTypes = eval(jQuery(this).attr('data-content-types'));
            var maxItems = jQuery(this).attr('data-max-items');
            var contentType = jQuery(ui.item).attr('data-content-type');
            var placeholder = $(ui.placeholder);


            if (allowedTypes.length > 0 && jQuery.inArray(contentType, allowedTypes) < 0) {
                placeholder.css('display', 'none');
                return;
            } else if (maxItems > 0 && jQuery(this).find('li.networking-sortable-list').length >= maxItems) {

                if (jQuery(ui.sender).attr('id') == jQuery(this).attr('id')) {
                    placeholder.css('display', 'block');
                } else {
                    placeholder.css('display', 'none');
                }

                jQuery(this).find(".empty_layout_block").hide();
                return;
            }
            else {
                placeholder.css('display', 'block');
                jQuery(this).find(".empty_layout_block").hide();
            }
        }

    });


    jQuery("input[id$='_delete']", "li.networking-sortable-list").each(function () {
        var inputId = jQuery(this).attr('id');
        jQuery(this).hide();

        var button = '<a href="javascript:void(null);" style="display: none;" id="delete_button_' + inputId + '" type="button">{% trans from 'SonataAdminBundle' %}action_delete{% endtrans %}</a>';
        jQuery(this).parent().append(button);
        jQuery('#delete_button_' + inputId).bind('click', function () {
            if (confirm('{{ "page_admin.confirm"|trans({}, admin.translationDomain) }}')) {
                var liElement = jQuery(this).closest('li.networking-sortable-list');
                var parent = jQuery(liElement).parent();

                jQuery.ajax({
                    url: '{{ url('admin_networking_initcms_page_deleteLayoutBlock') }}',
                    data: {
                        layoutBlock: liElement.attr('id'),
                        objectId: {{ sonata_admin.admin.root.id(sonata_admin.admin.root.subject) }},
                        uniqid: '{{ sonata_admin.admin.root.uniqid }}',
                        elementId: '{{ id }}'
                    },
                    success: function (xhr) {
                        createInitCmsMessageBox(xhr.messageStatus, xhr.message);
                        jQuery('#field_container_{{ id }}').replaceWith(xhr.html);
                        jQuery('#sonata-ba-field-container-{{ id }}').trigger('sonata.add_element');
                        jQuery('#field_container_{{ id }}').trigger('sonata.add_element');
                        saveLayoutBlockSort();
                    }
                });
            }
        });
    });

    jQuery('.content_preview i.icon-trash').each(function () {
        var icon = jQuery(this);
        icon.bind('click', function () {
            jQuery(this).closest('li').find('[id^="delete_button"]').trigger('click');
        })

    });
}

(function ($) {
    // refresh the sortable option when a new element is added
    jQuery('#sonata-ba-field-container-{{ id }}').bind('sonata.add_element', function () {
        apply_position_value_{{ id }}();
    });
    onAfterLoad();
})(jQuery);
</script>

<!-- / edit one association -->
{% endautoescape %}

