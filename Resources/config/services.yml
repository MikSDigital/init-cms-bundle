parameters:
    networking_init_cms.controllers_by_alias: {'Networking\InitCmsBundle\Entity\Page': "NetworkingInitCmsBundle:FrontendPage:index", 'Networking\InitCmsBundle\Entity\PageSnapshot': "NetworkingInitCmsBundle:FrontendPage:live"}
services:

    session:
        class: Symfony\Component\HttpFoundation\Session\Session
        arguments:
            - @session.storage
            - @networking_init_cms.session.attribute_bag #service id is defined below
            - @session.flash_bag

    networking_init_cms.event_dispatcher:
        class: Networking\InitCmsBundle\Component\EventDispatcher\CmsEventDispatcher

    networking_init_cms.session.attribute_bag:
        class: Symfony\Component\HttpFoundation\Session\Attribute\NamespacedAttributeBag
#
    networking_init_cms.page.helper.language_switcher:
        class: Networking\InitCmsBundle\Helper\LanguageSwitcherHelper
        calls:
            - [setContainer, [@service_container]]

    networking_init_cms.helper.bundle_guesser:
        class: Networking\InitCmsBundle\Helper\BundleGuesser

    networking_init_cms.helper.page_helper:
        class: Networking\InitCmsBundle\Helper\PageHelper
        calls:
            - [setContainer, [@service_container]]

    networking_init_cms.filter.type.simple_string:
        class: Networking\InitCmsBundle\Filter\SimpleStringFilter
        tags:
            - {name: sonata.admin.filter.type, alias: networking_init_cms_simple_string}

    networking_init_cms.form.extension.field:
        class: Networking\InitCmsBundle\Form\Extension\Field\Type\FormTypeFieldExtension
        tags:
          - { name: form.type_extension, alias: form}

    networking_init_cms.form.type.autocomplete:
        class: Networking\InitCmsBundle\Form\Type\AutocompleteType
        tags:
          - { name: form.type, alias: networking_type_autocomplete}

    networking_init_cms.form.type.iconradio:
        class: Networking\InitCmsBundle\Form\Type\IconradioType
        arguments:
            - "%networking_init_cms.page.templates%"
        tags:
          - { name: form.type, alias: networking_type_iconradio}

    networking_init_cms.media.entity.type:
        class: Networking\InitCmsBundle\Form\Type\MediaEntityType
        arguments:
            - '@doctrine'
        tags:
            - {name: form.type, alias: 'media_entity_type' }

    activity_listener:
        class: Networking\InitCmsBundle\EventListener\UserActivity
        arguments: [@security.context, @doctrine.orm.entity_manager]
        tags:
          - { name: kernel.event_listener, event: kernel.controller, method: onCoreController }

#Sonata blocks

    networking_init_cms.block.service.translatable_text:
        class: Networking\InitCmsBundle\Block\TranslatableTextBlockService
        arguments: ["networking_initcms_block_translatable", @templating]
        tags:
          - { name: sonata.block}

    networking_init_cms.block.service.online_users:
        class: Networking\InitCmsBundle\Block\OnlineUsersBlockService
        arguments: ["networking_initcms_block_online_users", @templating, @doctrine.orm.entity_manager]
        tags:
          - { name: sonata.block}

    networking_init_cms.block.service.pages:
        class: Networking\InitCmsBundle\Block\PagesBlockService
        arguments: ["networking_initcms_block_pages", @templating, @doctrine.orm.entity_manager]
        tags:
          - { name: sonata.block}

## Admin Controllers
# Page Admin Contoller

    networking_init_cms.admin.helper:
        class: Networking\InitCmsBundle\Admin\AdminHelper
        arguments:
            - @sonata.admin.pool

    networking_init_cms.page.admin.page:
        class: Networking\InitCmsBundle\Admin\PageAdmin
        arguments: [null, Networking\InitCmsBundle\Entity\Page, NetworkingInitCmsBundle:PageAdmin]
        calls:
            - [setTranslationDomain, [PageAdmin]]
            - [setLanguages, [%networking_init_cms.page.languages%]]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Pages, label_translator_strategy: sonata.admin.label.strategy.underscore, persist_filters: true }

# Tag Admin Controller
    networking_init_cms.page.admin.tag:
        class: Networking\InitCmsBundle\Admin\TagAdmin
        arguments: [null, Networking\InitCmsBundle\Entity\Tag, NetworkingInitCmsBundle:CRUD]
        calls:
            - [setTranslationDomain, [TagAdmin]]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Tags, label_translator_strategy: sonata.admin.label.strategy.underscore}

# HelpText Admin Controller
    networking_init_cms.page.admin.help_text:
        class: Networking\InitCmsBundle\Admin\HelpTextAdmin
        arguments: [null, Networking\InitCmsBundle\Entity\HelpText, SonataAdminBundle:CRUD]
        calls:
            - [setTranslationDomain, [HelpTextAdmin]]
            - [setLanguages, [%networking_init_cms.page.languages%]]
        tags:
            - { name: sonata.admin, manager_type: orm, label: 'Help Text', label_translator_strategy: sonata.admin.label.strategy.underscore}


# Layout Block Admin Controller
    networking_init_cms.page.admin.layout_block:
        class: Networking\InitCmsBundle\Admin\LayoutBlockAdmin
        arguments: [null, Networking\InitCmsBundle\Entity\LayoutBlock, SonataAdminBundle:CRUD]
        calls:
            - [setTranslationDomain, [PageAdmin]]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Content, label_translator_strategy: sonata.admin.label.strategy.underscore }

# Menu Admin Controller
    networking_init_cms.menu.admin.menu_item:
        class: Networking\InitCmsBundle\Admin\MenuItemAdmin
        arguments: [null, Networking\InitCmsBundle\Entity\MenuItem, NetworkingInitCmsBundle:MenuItemAdmin]
        calls:
            - [setTranslationDomain, [MenuItemAdmin]]
            - [setLanguages, [%networking_init_cms.page.languages%]]
            - [setSubClasses, [{"menu": Networking\InitCmsBundle\Entity\MenuItem, "menu item": Networking\InitCmsBundle\Entity\MenuItem}]]
        tags:
            - { name: sonata.admin, manager_type: orm, icon: happy, label: "Menus", label_translator_strategy: sonata.admin.label.strategy.underscore}

# Twig tinymce live
    networking_init_cms.twig.extension:
        class: Networking\InitCmsBundle\Twig\Extension\NetworkingHelperExtension
        arguments: [ @service_container ]
        tags:
          - { name: twig.extension }

# Dynamic routing for CMS Via Page CustomUrl
    networking_init_cms.enhancer_controllers_by_content:
        class: Symfony\Cmf\Component\Routing\Enhancer\RouteContentEnhancer
        arguments: ['_route', '_content']

    networking_init_cms.enhancer_controllers_by_class:
        class: Symfony\Cmf\Component\Routing\Enhancer\FieldByClassEnhancer
        arguments: ['_content', '_controller', %networking_init_cms.controllers_by_alias%]


    networking_init_cms.page_class_meta:
        class: Doctrine\ORM\Mapping\ClassMetadata
        arguments: [ Networking\InitCmsBundle\Entity\Page ]

    networking_init_cms.page_repository:
        class: Networking\InitCmsBundle\Entity\PageRepository
        arguments: [ @doctrine.orm.entity_manager, @networking_init_cms.page_class_meta ]
        calls:
          - [ setContainer, [ @service_container] ]

    networking_init_cms.content_route_class_meta:
        class: Doctrine\ORM\Mapping\ClassMetadata
        arguments: [ Networking\InitCmsBundle\Entity\ContentRoute ]

    networking_init_cms.content_route_repository:
        class: Networking\InitCmsBundle\Entity\ContentRouteRepository
        arguments: [ @doctrine.orm.entity_manager, @networking_init_cms.content_route_class_meta ]
        calls:
          - [ setContainer, [ @service_container ]]
          - [ setClassName, [ 'Networking\InitCmsBundle\Entity\Page'] ]

    networking_init_cms.cms_router:
        class: Symfony\Cmf\Component\Routing\DynamicRouter
        arguments: [@router.request_context, @networking_init_cms.nested_matcher, @networking_init_cms.generator]
        calls:
#          - [ setContainer, [ @service_container] ]
          - [ addRouteEnhancer, [@networking_init_cms.enhancer_controllers_by_content] ]
          - [ addRouteEnhancer, [@networking_init_cms.enhancer_controllers_by_class] ]
        tags:
          - { name: router, priority: 300 }

    networking_init_cms.nested_matcher:
        class: Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher
        arguments: [@networking_init_cms.content_route_repository]
        calls:
          - [ setFinalMatcher, [ @networking_init_cms.final_matcher] ]

    networking_init_cms.matcher.dummy_collection:
        class: "Symfony\Component\Routing\RouteCollection"

    networking_init_cms.matcher.dummy_context:
        class: "Symfony\Component\Routing\RequestContext"

#           <service id="cmf_routing.matcher.dummy_collection" class="Symfony\Component\Routing\RouteCollection" public="false"/>
#
#                  <service id="cmf_routing.matcher.dummy_context" class="Symfony\Component\Routing\RequestContext" public="false"/>

    networking_init_cms.final_matcher:
        class: Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher
        arguments: [@networking_init_cms.matcher.dummy_collection, @networking_init_cms.matcher.dummy_context]

    networking_init_cms.generator:
        class: Symfony\Cmf\Component\Routing\ContentAwareGenerator
        arguments: [@networking_init_cms.content_route_repository, @logger]
        calls:
#          - [ setContainer, [ @service_container] ]
          - [ setContentRepository, [@networking_init_cms.page_repository] ]

#    networking_init_cms.cms_router:
#        class: Symfony\Cmf\Component\Routing\DynamicRouter
#        arguments: [@router.request_context, @networking_init_cms.content_route_repository,  ]
#        calls:
#          - [ setContentRepository, [ @networking_init_cms.page_repository ] ]
#          - [ addControllerMapper, [ @networking_init_cms.controller_mapper ] ]
#        tags:
#          - { name: router, priority: 200}

# Listener for setting up content routes when page created/edited
    networking_init_cms.page_listner:
       class:  Networking\InitCmsBundle\EventListener\PageListener
       arguments: [@session, @service_container ]
       tags:
           - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
           - { name: doctrine.event_listener, event: postPersist, method: postPersist }
           - { name: jms_serializer.event_subscriber }

    networking_init_cms.last_edited_listener:
       class:  Networking\InitCmsBundle\EventListener\LastEditedListener
       arguments: [@session ]
       tags:
           - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
           - { name: doctrine.event_listener, event: postPersist, method: postPersist }

    networking_init_cms.layout_block_listner:
       class:  Networking\InitCmsBundle\EventListener\LayoutBlockListener
       arguments: [@serializer]
       tags:
           - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
           - { name: doctrine.event_listener, event: postPersist, method: postPersist }
           - { name: doctrine.event_listener, event: preRemove, method: preRemove }

    networking_init_cms.version_listner:
       class:  Networking\InitCmsBundle\Doctrine\Extensions\Versionable\VersionListener
       tags:
           - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
           - { name: doctrine.event_listener, event: postPersist, method: postPersist }

#Listner for setting the correct locale in the session on language changes
    networking_init_cms.locale_listner:
        class: Networking\InitCmsBundle\EventListener\LocaleListener
        arguments:  [ @security.access_map, @security.context,  %networking_init_cms.page.languages%, %kernel.default_locale%, @router ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 33 }
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin, priority: 10}

#listener that tracks admin pages
    networking_init_cms.admin_tracker_listener:
        class: Networking\InitCmsBundle\EventListener\AdminTrackerListener
        arguments: [ @sonata.admin.pool ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 0 }

#Listener which checks for is_deletable field
    networking_init_cms.entity_delete_listener:
        class: Networking\InitCmsBundle\EventListener\EntityDeleteListener
        tags:
           - { name: doctrine.event_listener, event: preRemove, method: preRemove }

#Listener for setting the correct template on the contentRoute object

    networking_init_cms.content_route_listner:
       class:  Networking\InitCmsBundle\EventListener\ContentRouteListener
       calls:
           - [setContainer, [@service_container]]
       tags:
           - { name: doctrine.event_listener, event: preUpdate, method: preUpdate }
           - { name: doctrine.event_listener, event: prePersist, method: prePersist }

# Preload uniquer url validator with the entity manager and the service container
    networking_init_cms.unique_url_validator:
        class: Networking\InitCmsBundle\Validator\Constraints\UniqueURLValidator
        arguments: [@doctrine.orm.entity_manager, @service_container]
        tags:
          - { name: validator.constraint_validator, alias: unique_url_validator }

## Menus

# Declare Main Navigation Factory Class for the admin menu
    networking_init_cms.menu.admin_menu_builder:
        class: Networking\InitCmsBundle\Component\Menu\AdminMenuBuilder
        scope: request
        arguments: [ '@knp_menu.factory', '@security.context', '@service_container' ]



    networking_init_cms.menu.admin_menu:
        class: Knp\Menu\MenuItem
        factory_service: networking_init_cms.menu.admin_menu_builder
        factory_method: createAdminMenu
        arguments: [ '@request']
        scope: request
        tags:
            - { name: knp_menu.menu, alias: AdminMenu }

    networking_init_cms.menu.admin_menu_template:
        class: %mopa_bootstrap.navbar.generic%
        arguments:
            # first argument: a named array of menues:
            - { status_menu: @networking_init_cms.menu.admin_menu= }
            - {}
            # third argument: a named array of options
            - { fixedTop: false, isFluid: false, template: NetworkingInitCmsBundle:Navbar:admin_nav_items.html.twig}
        tags:
            # The alias is used to retrieve the navbar in templates
            - { name: mopa_bootstrap.navbar, alias: AdminMenu }

# Load the debug extension for twig templates
    networking_init_cms.twig.extension.debug:
        class:  Twig_Extension_Debug
        tags:
             - { name: 'twig.extension' }


### monolog logging
    networking_init_cms.logger:
        class: Symfony\Bridge\Monolog\Logger
        arguments: [newo]
        calls:
            - [pushHandler, [@networking_init_cms.handler]]

    networking_init_cms.handler:
        class: Monolog\Handler\StreamHandler
        # 200 = INFO, see Monolog::Logger for the values of log levels
        arguments: [%kernel.logs_dir%/%kernel.environment%.changed_entities.log, 200]

    networking_init_cms.entity_changed_listener:
        class: Networking\InitCmsBundle\EventListener\EntityChangedListener
        arguments: [@service_container, @networking_init_cms.logger]
        tags:
           - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
           - { name: doctrine.event_listener, event: postPersist, method: postPersist }
           - { name: doctrine.event_listener, event: preRemove, method: preRemove }
           - { name: monolog.logger, channel: newo}
